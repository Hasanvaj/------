const axios = require("axios");
const simsim = "https://simsimi.cyberbot.top";

module.exports.config = {
 name: "baby",
 version: "1.0.3",
 hasPermssion: 0,
 credits: "ULLASH",
 description: "Cute AI Baby Chatbot | Talk, Teach & Chat with Emotion тШвя╕П",
 commandCategory: "simsim",
 usages: "[message/query]",
 cooldowns: 0,
 prefix: false
};

module.exports.run = async function ({ api, event, args, Users }) {
 try {
 const uid = event.senderID;
 const senderName = await Users.getNameUser(uid);
 const query = args.join(" ").toLowerCase();

 if (!query) {
 const ran = ["Bolo baby", "hum"];
 const r = ran[Math.floor(Math.random() * ran.length)];
 return api.sendMessage(r, event.threadID, (err, info) => {
 if (!err) {
 global.client.handleReply.push({
 name: module.exports.config.name,
 messageID: info.messageID,
 author: event.senderID,
 type: "simsimi"
 });
 }
 });
 }

 if (["remove", "rm"].includes(args[0])) {
 const parts = query.replace(/^(remove|rm)\s*/, "").split(" - ");
 if (parts.length < 2)
 return api.sendMessage(" | Use: remove [Question] - [Reply]", event.threadID, event.messageID);

 const [ask, ans] = parts;
 const res = await axios.get(`${simsim}/delete?ask=${encodeURIComponent(ask)}&ans=${encodeURIComponent(ans)}`);
 return api.sendMessage(res.data.message, event.threadID, event.messageID);
 }

 if (args[0] === "list") {
 const res = await axios.get(`${simsim}/list`);
 if (res.data.code === 200) {
 return api.sendMessage(
 `тЩ╛ Total Questions Learned: ${res.data.totalQuestions}\nтШЕ Total Replies Stored: ${res.data.totalReplies}\nтШая╕Оя╕О Developer: ${res.data.author}`,
 event.threadID,
 event.messageID
 );
 } else {
 return api.sendMessage(`Error: ${res.data.message || "Failed to fetch list"}`, event.threadID, event.messageID);
 }
 }

 if (args[0] === "edit") {
 const parts = query.replace("edit ", "").split(" - ");
 if (parts.length < 3)
 return api.sendMessage(" | Use: edit [Question] - [OldReply] - [NewReply]", event.threadID, event.messageID);

 const [ask, oldReply, newReply] = parts;
 const res = await axios.get(`${simsim}/edit?ask=${encodeURIComponent(ask)}&old=${encodeURIComponent(oldReply)}&new=${encodeURIComponent(newReply)}`);
 return api.sendMessage(res.data.message, event.threadID, event.messageID);
 }

 if (args[0] === "teach") {
 const parts = query.replace("teach ", "").split(" - ");
 if (parts.length < 2)
 return api.sendMessage(" | Use: teach [Question] - [Reply]", event.threadID, event.messageID);

 const [ask, ans] = parts;
 const res = await axios.get(`${simsim}/teach?ask=${encodeURIComponent(ask)}&ans=${encodeURIComponent(ans)}&senderID=${uid}&senderName=${encodeURIComponent(senderName)}`);
 return api.sendMessage(`${res.data.message || "Reply added successfully!"}`, event.threadID, event.messageID);
 }

 const res = await axios.get(`${simsim}/simsimi?text=${encodeURIComponent(query)}&senderName=${encodeURIComponent(senderName)}`);
 const responses = Array.isArray(res.data.response) ? res.data.response : [res.data.response];

 for (const reply of responses) {
 await new Promise((resolve) => {
 api.sendMessage(reply, event.threadID, (err, info) => {
 if (!err) {
 global.client.handleReply.push({
 name: module.exports.config.name,
 messageID: info.messageID,
 author: event.senderID,
 type: "simsimi"
 });
 }
 resolve();
 }, event.messageID);
 });
 }
 } catch (err) {
 console.error(err);
 return api.sendMessage(`| Error in baby command: ${err.message}`, event.threadID, event.messageID);
 }
};

module.exports.handleReply = async function ({ api, event, Users, handleReply }) {
 try {
 const senderName = await Users.getNameUser(event.senderID);
 const replyText = event.body ? event.body.toLowerCase() : "";
 if (!replyText) return;

 const res = await axios.get(`${simsim}/simsimi?text=${encodeURIComponent(replyText)}&senderName=${encodeURIComponent(senderName)}`);
 const responses = Array.isArray(res.data.response) ? res.data.response : [res.data.response];

 for (const reply of responses) {
 await new Promise((resolve) => {
 api.sendMessage(reply, event.threadID, (err, info) => {
 if (!err) {
 global.client.handleReply.push({
 name: module.exports.config.name,
 messageID: info.messageID,
 author: event.senderID,
 type: "simsimi"
 });
 }
 resolve();
 }, event.messageID);
 }
 );
 }
 } catch (err) {
 console.error(err);
 return api.sendMessage(` | Error in handleReply: ${err.message}`, event.threadID, event.messageID);
 }
};

module.exports.handleEvent = async function ({ api, event, Users }) {
 try {
 const raw = event.body ? event.body.toLowerCase().trim() : "";
 if (!raw) return;
 const senderName = await Users.getNameUser(event.senderID);
 const senderID = event.senderID;

 if (
 raw === "baby" || raw === "bot" || raw === "bby" ||
 raw === "jan" || raw === "xan" || raw === "ржЬрж╛ржи" || raw === "ржмржЯ" || raw === "ржмрзЗржмрж┐"
 ) {
 const greetings = [
 "ржирж┐рж░ржмрждрж╛ ржорж╛ржирзЗ ржЕрж╣ржВржХрж╛рж░ ржирзЯ,ржирж┐рж░ржмрждрж╛ ржорж╛ржирзЗ ржзрзИрж░рзНржпЁЯШКЁЯеА", "ЁЯдН┬аржпрзЗ ржЖрж▓рзНрж▓рж╛рж╣рж░ ржЙржкрж░ ржнрж░рж╕рж╛ ржХрж░рзЗ,рж╕рзЗ ржХржЦржирзЛржЗ ржПржХрж╛ ржиржпрж╝ред", "рж▓ржХрзНрж╖рзЗ ржкрзМржБржЫрж╛рждрзЗ ржзрзИрж░рзНржп рж▓рж╛ржЧрзЗЁЯР░ЁЯй╖", "ржзрзИрж░рзНржп ржХржЦржирзЛ-ржорж╛ржирзБрж╖ржХрзЗ-ржаржХрж╛ржЗ ржирж╛!!ЁЯМ╕ЁЯМ┐", "рж╕ржорзНржкрж░рзНржХ рж╣рзЛржХ рж╣рж╛рж▓рж╛рж▓!ржЙржжрзНржжрзЗрж╢рзНржп рж╣рзЛржХ ржЬрж╛ржирзНржирж╛ржд,,ЁЯМ║ЁЯеА", "ржмрж╛ржирзНржжрж╛рж░ ржЧрзБржирж╛рж╣ ржпржд ржмржбрж╝ЁЯТФржЖрж▓рзНрж▓рж╛рж╣рж░ ржХрзНрж╖ржорж╛ рждрж╛рж░ ржЪрзЗржпрж╝рзЗржУ ржмржбрж╝тАвЁЯМ║ЁЯШШ", "рж╕рзГрж╖рзНржЯрж┐ржХрж░рзНрждрж╛рж░ ржЙржкрж░ ржнрж░рж╕рж╛ ржерж╛ржХрж▓рзЗ,ржЕрж╕ржорзНржнржм ржУ рж╕ржорзНржнржм рж╣ржпрж╝рзЗ ржпрж╛ржпрж╝.тЭдя╕ПЁЯеА", "рж╣рж╛рж╕ржмрзБрж▓рзНрж▓рж╛рж╣ ржУржпрж╝рж╛ ржирж┐'ржорж╛рж▓ ржУржпрж╝рж╛ржХрж┐рж▓ ржЕрж░рзНржерж╛рзО ржЖржорж╛рж░ ржЬржирзНржп ржЖржорж╛рж░ ржЖрж▓рзНрж▓рж╛рж╣ ржпржерзЗрж╖рзНржЯЁЯШН", "ржкрзНрж░рж╕ржЩрзНржЧ ржпржЦржи ржзрж░рзНржорзЗрж░рждржЦржи ржЖржорж╛ржжрзЗрж░ ржЗрж╕рж▓рж╛ржорж┐ рж╕рзЗрж░рж╛...ЁЯШН", "ЁЯМ╕┬атАЬрж╕ржмржЪрзЗржпрж╝рзЗ рж╕рзБржирзНржжрж░ рж╕ржорзНржкрж░рзНржХ рж╣рж▓рзЛ,ржмрж╛ржирзНржжрж╛ ржУ рж░ржмрзЗрж░ ржоржзрзНржпрзЗ ржжрзЛрзЯрж╛рж░ рж╕ржорзНржкрж░рзНржХЁЯШН", "ЁЯФе┬атАЬрж╣рж╛рж░рж┐ржпрж╝рзЗ ржЧрзЗрж▓рзЗ ржЪрж┐ржирзНрждрж╛ ржХрж░рзЛ ржирж╛,ржЖрж▓рзНрж▓рж╛рж╣рж░ рж░рж╛рж╕рзНрждрж╛ рж╕ржм рж╕ржоржпрж╝ ржЦрзЛрж▓рж╛ЁЯЩВ", "ржирж┐рж╢рзНржЪржпрж╝ржЗ ржЖрж▓рзНрж▓рж╛рж╣ рж╕ржмржХрж┐ржЫрзБрж░ ржЙржкрж░ ржХрзНрж╖ржорждрж╛ржмрж╛ржи,рж╕рзВрж░рж╛ ржмрж╛ржХрж╛рж░рж╛, ржЖрзЯрж╛ржд рзирзж", "рж▓рж╛ ржЗрж▓рж╛рж╣рж╛ ржЗрж▓рзНрж▓рж╛рж▓рзНрж▓рж╛рж╣ ржПржЗ ржПржХржЯрж┐ ржмрж╛ржХрзНржп ржмржжрж▓рзЗ ржжрж┐рждрзЗ ржкрж╛рж░рзЗ рждрзЛржорж╛рж░ ржЪрж┐рж░ржХрж╛рж▓ЁЯХКя╕П", "ржпрзЗ ржмрзНржпржХрзНрждрж┐ ржЕржирзНржпрзЗрж░ ржЬржирзНржп ржжрзЛржпрж╝рж╛ ржХрж░рзЗтЭдя╕ПЁЯШНЁЯМ╝ржлрзЗрж░рзЗрж╢рждрж╛рж░рж╛  рждрж╛рж░ ржЬржирзНржп ржжрзЛржпрж╝рж╛ ржХрж░рзЗЁЯМ║", "ржПржд ржкрзГржерж┐ржмрзА ржпржЦржи ржорзБржЦ ржлрж┐рж░рж┐ржпрж╝рзЗ ржирзЗржпрж╝, рждржЦржи ржЖрж▓рзНрж▓рж╛рж╣ ржмрж▓рзЗржи ржЖржорж┐ рждрзЛ ржЖржЫрж┐ рждрзЛржорж╛рж░ рж╕рж╛ржерзЗЁЯе░", "ржЗрж╕рж▓рж╛ржо рж╢рзБржзрзБ ржзрж░рзНржо ржиржпрж╝, ржПржЯрж╛ ржкрзБрж░рзЛ ржЬрзАржмржи ржмрзНржпржмрж╕рзНржерж╛ЁЯе░ЁЯдй", "рж╕ржмржХрж┐ржЫрзБрж░ ржЪрж╛ржмрж┐ржХрж╛ржарж┐ ржЖрж▓рзНрж▓рж╛рж╣рж░ рж╣рж╛рждрзЗ, рждрж╛ржБрж░ ржЙржкрж░ ржнрж░рж╕рж╛ рж░рж╛ржЦрзЛЁЯШЗ", "ржПржд ржкрзГржерж┐ржмрзА ржпржЦржи ржорзБржЦ ржлрж┐рж░рж┐ржпрж╝рзЗ ржирзЗржпрж╝, рждржЦржи ржЖрж▓рзНрж▓рж╛рж╣ ржмрж▓рзЗржи ржЖржорж┐ рждрзЛ ржЖржЫрж┐ рждрзЛржорж╛рж░ рж╕рж╛ржерзЗЁЯе░", "ржЬрзАржмржи рж╣рж▓рзЛ ржорзГрждрзНржпрзБрж░ ржХрж╛ржЫ ржерзЗржХрзЗ ржзрж╛рж░ ржХрж░рзЗ ржирзЗржУржпрж╝рж╛ ржХрж┐ржЫрзБржЯрж╛ рж╕ржоржпрж╝!ЁЯЩВ", "ржкрж╛ржкржХрзЗ ржорзБржЫрждрзЗ рж╣ржмрзЗ, рж╣рзЯ ржжрзБржирж┐рзЯрж╛рждрзЗ рждрж╛ржУржмрж╛рж░ ржЕрж╢рзНрж░рзБ ржжрж┐рзЯрзЗ, ржЕржержмрж╛,ржЖржЦрж┐рж░рж╛рждрзЗрж░ ржЬрж╛рж╣рж╛ржирзНржирж╛ржорзЗрж░ ржЖржЧрзБржи ржжрж┐рзЯрзЗ!(ржЗржмржирзБрж▓ ржХрж╛ржЗржпрзНржпрзБржо рж░рж╛ржГ)", "ржЖрж▓рзНрж▓рж╛рж╣рзБржорзНржорж╛ ржЗржирзНржирж┐ ржЖрж╕ржЖрж▓рзБржХрж╛ ржорж┐ржи ржлрж╛ржБржжрж▓рж┐ржХ-ржЕрж░рзНржержГ- рж╣рзЗ ржЖрж▓рзНрж▓рж╛рж╣ ржЖржкржирж┐ ржЖржорж╛рж░ ржнрж╛ржЧрзНржп ржЦрзБрж▓рзЗ ржжрж┐ржиЁЯд▓ЁЯе║", "ржирзЗтАЩрждрж╛рж░ ржорждрзЛ ржирзЗтАЩрждрж╛ ржПржХржЬржиржЗ ржЫрж┐рж▓рзЗржи,рждрж┐ржирж┐ рж╣рж▓рзЗржи-ржмрж┐рж╢рзНржмржиржмрзА рж╣ржпрж░ржд ржорзБрж╣рж╛ржорзНржоржж (рж╕рж╛ржГ) ржЖрж▓рж╣рж╛ржоржжрзБрж▓рж┐рж▓рзНрж▓рж╛рж╣ЁЯдй", "ржЬрзАржмржи рж╣рж▓рзЛ ржорзГрждрзНржпрзБрж░ ржХрж╛ржЫ ржерзЗржХрзЗ ржзрж╛рж░ ржХрж░рзЗ ржирзЗржУржпрж╝рж╛ ржХрж┐ржЫрзБржЯрж╛ рж╕ржоржпрж╝!тЭгя╕ПЁЯТФ", "рж╕ржорзЯ ржерж╛ржХрждрзЗ ржЗрж╕рж▓рж╛ржорзЗрж░ ржкржерзЗ ржЖрж╕рзЛЁЯе░", " ржпрзЗ ржЕржирзНрждрж░рзЗ ржХрзБрж░ржЖржи ржЖржЫрзЗ, рж╕рзЗ ржЕржирзНрждрж░ ржХржЦржирзЛ ржЕржирзНржз рж╣ржпрж╝ ржирж╛ред┬аЁЯУЦ", "ржЖрж▓рзНрж▓рж╛рж╣рж░ рж╕рзГрж╖рзНржЯрж┐рж░ рждрзЛ рж╕ржм ржХрж┐ржЫрзБржЗ рж╕рзБржирзНржжрж░,ржЕрж╕рзБржирзНржжрж░ рждрзЛ ржорж╛ржирзБрж╖рзЗрж░ ржоржи ржУ ржорж╛ржирж╕рж┐ржХрждрж╛ЁЯШЕ", "ржЖрж▓рзНрж▓рж╛рж╣рж░ ржЙржкрж░ ржнрж░рж╕рж╛ ржХрж░рзЛ, рждрж┐ржирж┐ржЗ ржпржерзЗрж╖рзНржЯ,рж╕рзВрж░рж╛ ржЖрж▓-ржЗржорж░рж╛ржи", "ржнрж╛ржЧрзНржпржХрзЗ ржЧрж╛рж▓рж┐ ржжрж┐ржУ ржирж╛, рждрзБржорж┐ ржнрж╛ржЧрзНржпржмрж╛ржи ржмрж▓рзЗржЗ,ржкрзНрж░рж┐ржпрж╝ ржиржмрзА рж╣ржпрж░ржд ржорзБрж╣рж╛ржорзНржоржж (рж╕ржГ) ржПрж░ ржЙржорзНржорждЁЯдйЁЯе░", "рж╕ржмрж╛ржЗ ржмрж▓рж┐,рж▓рж╛ ржЗрж▓рж╛рж╣рж╛ ржЗрж▓рзНрж▓рж╛рж▓рзНрж▓рж╛рж╣рзБ ржорзБрж╣рж╛ржорзНржорж╛ржжрзБрж░ рж░рж╛рж╕рзБрж▓рзБрж▓рзНрж▓рж╛рж╣ЁЯдНЁЯТЭ", "ржЗрж╕рж▓рж╛ржорзЗрж░ ржХрзЛржирзЛ рждржерзНржп ржЬрж╛ржирждрзЗ ржЪрж╛ржЗрж▓рзЗ ржмрж╕ рж░рж╛ржирж╛ ржЗржиржмржХрзНрж╕рзЗ ржиржХ ржжрж┐ржи, https://www.facebook.com/profile.php?id=100042211012809", "ржЖржорж╛рж░ ржЗрж╕рж▓рж╛ржо ржзрж░рзНржо ржЖржорж╛ржХрзЗ рж╢рж┐ржЦрзЗржЫрзЗ, ржР ржХржкрж╛рж▓ ржХржЦржирзЛ ржЦрж╛рж░рж╛ржк рж╣рждрзЗ ржкрж╛рж░рзЗ ржирж╛,ржпрзЗ ржХржкрж╛рж▓ ржЖрж▓рзНрж▓рж╛рж╣рж░ рж╕рж┐ржЬржжрж╛ ржХрж░рзЗЁЯдй", "ржПржХржжрж┐ржи ржЖржорж╛ржжрзЗрж░ ржЗрж╕рж▓рж╛ржо ржзрж░рзНржо ржкрзБрж░рзЛ ржкрзГржерж┐ржмрзА рж╢рж╛рж╕ржи ржХрж░ржмрзЗ,ржЖрж░ ржкрзБрж░рзЛ ржкрзГржерж┐ржмрзАрждрзЗ ржЗрж╕рж▓рж╛ржорж┐ржХ ржЖржжрж░рзНрж╢рзЗ ржЪрж▓ржмрзЗтЬКЁЯТп", "ржЖрж░ ржХрж┐ржЫрзБ ржерж╛ржХ ржмрж╛ ржирж╛ ржерж╛ржХ ржПржЗ ржкрзГржерж┐ржмрзАрждрзЗ ржЗрж╕рж▓рж╛ржо ржЫрж┐рж▓рзЛ, ржПржмржВ ржЗрж╕рж▓рж╛ржо ржерж╛ржХржмрзЗЁЯдйЁЯдЧ", "ржоржХрзНржХрж╛! рждрзБржорж┐ ржзржирзНржп! рждрзЛржорж╛рж░ ржмрзБржХрзЗ рж╣ржпрж╝рзЗржЫрж┐рж▓ ржмрж┐рж╢рзНржм ржиржмрзАрж░ ржЬржирзНржо, ЁЭРАЁЭРеЁЭРбЁЭРЪЁЭРжЁЭРЭЁЭРоЁЭРеЁЭРвЁЭРеЁЭРеЁЭРЪЁЭРб"
 ];
 const randomReply = greetings[Math.floor(Math.random() * greetings.length)];
      const mention = {
        body: `@${senderName} ${randomReply}`,
        mentions: [{
          tag: `@${senderName}`,
          id: senderID
        }]
      };

 return api.sendMessage(mention, event.threadID, (err, info) => {
 if (!err) {
 global.client.handleReply.push({
 name: module.exports.config.name,
 messageID: info.messageID,
 author: event.senderID,
 type: "simsimi"
 });
 }
 }, event.messageID);
 }

 if (
 raw.startsWith("baby ") || raw.startsWith("bot ") || raw.startsWith("bby ") ||
 raw.startsWith("jan ") || raw.startsWith("xan ") ||
 raw.startsWith("ржЬрж╛ржи ") || raw.startsWith("ржмржЯ ") || raw.startsWith("ржмрзЗржмрж┐ ")
 ) {
 const query = raw
 .replace(/^baby\s+|^bot\s+|^bby\s+|^jan\s+|^xan\s+|^ржЬрж╛ржи\s+|^ржмржЯ\s+|^ржмрзЗржмрж┐\s+/i, "")
 .trim();
 if (!query) return;

 const res = await axios.get(`${simsim}/simsimi?text=${encodeURIComponent(query)}&senderName=${encodeURIComponent(senderName)}`);
 const responses = Array.isArray(res.data.response) ? res.data.response : [res.data.response];

 for (const reply of responses) {
 await new Promise((resolve) => {
 api.sendMessage(reply, event.threadID, (err, info) => {
 if (!err) {
 global.client.handleReply.push({
 name: module.exports.config.name,
 messageID: info.messageID,
 author: event.senderID,
 type: "simsimi"
 });
 }
 resolve();
 }, event.messageID);
 });
 }
 }
 } catch (err) {
 console.error(err);
 return api.sendMessage(`| Error in handleEvent: ${err.message}`, event.threadID, event.messageID);
 }
};
